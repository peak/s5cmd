package log

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/peak/s5cmd/flags"
)

// stdoutCh is used to synchronize writes to standard output. Multi-line
// logging is not possible if all workers print logs at the same time.
var stdoutCh = make(chan string, 10000)

var Logger = New()

type logLevel int

const (
	levelDebug logLevel = iota
	levelInfo
	levelSuccess
	levelWarning
	levelError
)

func (l logLevel) String() string {
	switch l {
	case levelSuccess:
		return "+"
	case levelError:
		return "ERROR"
	case levelWarning:
		return "WARNING"
	case levelInfo:
		return "#"
	case levelDebug:
		return "DEBUG"
	default:
		return "UNKNOWN"
	}
}

type logger struct {
	donech chan struct{}
	impl   *log.Logger
}

func New() *logger {
	logger := &logger{
		donech: make(chan struct{}),
		impl:   log.New(os.Stdout, "", 0),
	}
	go logger.stdout()
	return logger
}

func (l *logger) printf(level logLevel, format string, args ...interface{}) {
	raw := fmt.Sprintf(format, args...)
	var msg string

	switch level {
	case levelError:
		msg = fmt.Sprintf("-ERR %v", raw)
	case levelWarning:
		msg = fmt.Sprintf("%v %v", level, raw)
	case levelSuccess, levelInfo:
		msg = fmt.Sprintf("                   %v %v", level, raw)

	}
	stdoutCh <- msg
}

func (l *logger) Debug(format string, args ...interface{}) {
	if *flags.Verbose {
		l.printf(levelDebug, format, args...)
	}
}

func (l *logger) Info(format string, args ...interface{}) {
	l.printf(levelInfo, format, args...)
}

func (l *logger) Success(format string, args ...interface{}) {
	l.printf(levelSuccess, format, args...)
}

func (l *logger) Warning(format string, args ...interface{}) {
	raw := fmt.Sprintf(format, args...)
	raw = cleanupSpaces(raw)
	l.printf(levelWarning, raw)
}

func (l *logger) Error(format string, args ...interface{}) {
	raw := fmt.Sprintf(format, args...)
	raw = cleanupSpaces(raw)
	l.printf(levelError, raw)
}

func (l *logger) stdout() {
	defer close(l.donech)

	for msg := range stdoutCh {
		l.impl.Println(msg)
	}
}

func (l *logger) Close() {
	close(stdoutCh)
	<-l.donech
}

// cleanupError converts multiline error messages generated by aws-sdk-go into
// a single line.
func cleanupSpaces(s string) string {
	s = strings.Replace(s, "\n", " ", -1)
	s = strings.Replace(s, "\t", " ", -1)
	s = strings.Replace(s, "  ", " ", -1)
	s = strings.TrimSpace(s)
	return s
}
